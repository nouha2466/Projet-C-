#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <random>
#include <iomanip>
#include <cmath>
#include <map>

using namespace std;

struct Pixel {
    int r, g, b;
};

class CoordPolaires {
public:
    double theta;
    double p;

    CoordPolaires(double t, double r) : theta(t), p(r) {}
};

vector<vector<double>> matrice(int a,int b) {
    const int lignes = a;
    const int colonnes = b;

    vector<vector<double>> matrice(lignes, vector<double>(colonnes));
    for (int i=0;i<lignes;++i){
      for (int j=0;j<colonnes;++j){
        matrice[i][j] = 0;
      }
    }

    return matrice;
}

vector<vector<Pixel>> lirePPM(string chemin) {
    ifstream fichier(chemin);
    vector<vector<Pixel>> matrice;

    if (!fichier.is_open()) {
        cerr << "Impossible d'ouvrir le fichier : " << chemin << endl;
        return matrice;
    }

    string format;
    int largeur, hauteur, maxVal;
    fichier >> format >> largeur >> hauteur >> maxVal;

    if (format != "P3") {
        cerr << "Mauvais format" << endl;
        return matrice;
    }

    matrice.resize(hauteur, vector<Pixel>(largeur));

    for (int i = 0; i < hauteur; ++i) {
        for (int j = 0; j < largeur; ++j) {
            Pixel pixel;
            fichier >> pixel.r >> pixel.g >> pixel.b;
            matrice[i][j] = pixel;
        }
    }

    fichier.close();
    return matrice;
}

class transformHough {
private:
  map<pair<int,int>,int> compteur;
public:
  transformHough() {}
  
  void ajoutePoint(int x, int y) {
    for (int theta =0;theta<180;theta++) {
      float thetaRad = M_PI/180*theta;
      double p = x*cos(thetaRad) + y*sin(thetaRad);
      pair<int, int> pt = make_pair(theta, (int)p);
      if (compteur.find(pt) == compteur.end()) {
         compteur[pt] = 1;
      } else {
         compteur[pt]++;
        }
    }
  }

  void afficheCompteur() {
    for (const auto &pair : compteur) {
      if (pair.second>=250){
        cout << "Theta: " << pair.first.first << ", p: " << pair.first.second
        << " -> Compte: " << pair.second << endl;
      }
    }
  }
  
  vector<pair<int,int>> stock(int seuil){
    vector<pair<int,int>> vecteur;
    for (const auto &pair : compteur) {
      if (pair.second>=seuil){
        vecteur.push_back(pair.first);
      }
    }
    return vecteur;
  }
  
};

int main() {
  transformHough TH;
  
  string chemin = "m1projetcpp2.ppm";
  vector<vector<Pixel>> matriceImage = lirePPM(chemin);

  int rows = matriceImage.size();
  int cols = matriceImage[0].size();
  
  for (int i=0;i<rows;++i){
    for (int j=0;j<cols;++j){
      if (matriceImage[i][j].r > 0 || matriceImage[i][j].g > 0 || matriceImage[i][j].b > 0){
        TH.ajoutePoint(i,j);
      }
    }
  }
  TH.afficheCompteur();
  vector<pair<int,int>> resultat = TH.stock(250);
  vector<vector<double>> MatResult = matrice(rows,cols);
  
  /*for (int i=0;i<resultat;i++){
    if (resultat[i][0] != 90){
      int theta = M_PI/180*resultat[i][0];
      int p = resultat[i][1];
      
    }*/

  return 0;
}
